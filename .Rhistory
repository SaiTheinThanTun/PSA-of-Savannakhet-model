#                 alpha= .5,             #mixing between populations
#                 delta = 2,            #relationship between transmission in pop1 and pop2
#                 epsilonh=0.23,      # per bite probability of an infectious mosquito infecting a human
#                 epsilonm=0.5,       # per bite probability of an infectious human infecting a mosquito
#                 b=365/3,            # per mosquito rate of biting
#                 deltam=365/14,      # rate leaving latent period
#                 gammam=365/10,       # mosquito death rate
#                 bh = 1,                # bites per human per year
#                 mu = 50,            #life expectancy
#                 omega = 1/2,           #duration of immunity in years
#                 lossd = 30,          #loss of drug prophylactic effect
#                 nuTr = 14,            #days of infectiousness after ACT
#                 timei = 2018,
#                 primon = 1,            #primaquine use
#                 nuTrp = 7           # days of infectiosness after treatment ACT+primaquine [N]
#
# )
GMSout0 <- runFIRST(initprevR, scenario_0, parametersR)
runin<-(2016-startyear)/dt
par(mfrow=c(2,1))
plot(GMSout0[,1][runin:length(GMSout0)],GMSout0[,6][runin:length(GMSout0)], type='l', col='blue', main = "p1", xlab="years", ylab="total incidence")
plot(GMSout0[,1][runin:length(GMSout0)],GMSout0[,9][runin:length(GMSout0)], type='l', col='red', main = "p2", xlab="years", ylab="total incidence")
par(mfrow=c(1,1))
# plot(GMSout0[,1][runin:length(GMSout0)],GMSout0[,11][runin:length(GMSout0)], type='l', col='blue', main = "SIR", xlab="years", ylab="no. of individuals")
# lines(GMSout0[,12][runin:length(GMSout0)], type='l', col='red')
# lines(GMSout0[,13][runin:length(GMSout0)], type='l', col='orange')
plot(GMSout0[,1],GMSout0[,11], type='l', col='blue', main = "SIR1", xlab="years", ylab="no. of individuals")
lines(GMSout0[,12], type='l', col='red')
lines(GMSout0[,13], type='l', col='orange')
plot(GMSout0[,1],GMSout0[,12], type='l', col='red')
plot(GMSout0[,1],GMSout0[,13], type='l', col='orange')
plot(GMSout0[,1],GMSout0[,14], type='l', col='blue', main = "SIR2", xlab="years", ylab="no. of individuals")
lines(GMSout0[,15], type='l', col='red')
lines(GMSout0[,16], type='l', col='orange')
plot(GMSout0[,1],GMSout0[,15], type='l', col='red')
plot(GMSout0[,1],GMSout0[,16], type='l', col='orange')
# par(mfrow=c(1,3))
# #plot(GMSouti[,1], GMSouti[,2], type="l")
# plot(GMSout0[,1], GMSout0[,2], type="l")
# plot(GMSout0[,1], GMSout0[,3], type="l")
# plot(GMSout0[,1], GMSout0[,4], type="l")
#
#
#
#
# #times = seq(2010, 2025, 1/12)
#
# #out <- as.data.frame(ode(y = initprevR, times = times, func = runFIRST, parms = parametersR))
#
# #out <- as.data.frame(ode(y = init, times = times, func = sir, parms = parameters))
#
# #out$time <- NULL
# par(mfrow=c(1,1))
# matplot(GMSout0[,1], GMSout0[,-1], type = "l", xlab = "Time", ylab = "Ss, Is and Rs",
#         main = "SIR Model", lwd = 2, lty = 1, bty = "l", col = 2:4)
shiny::runApp('D:/Dropbox/IBM project_Sai/Lao Model/v8_booster')
v1 <- 3
v2 <- .5
v3 <- 100
v1r <- c(1,5)
v2r <- c(0,1)
v3r <- c(75,125)
#column -> variables
#row -> scenarios
no.s <- 4 #no. of scenarios
vrl <- NA
vrl[1,] <- c(v1r,v1,no.s)
vrl[2,] <- c(v2r, v2, no.s)
vrl[3,] <- c(v3r, v3, no.s)
v1 <- 3
v2 <- .5
v3 <- 100
v1r <- c(1,5)
v2r <- c(0,1)
v3r <- c(75,125)
#column -> variables
#row -> scenarios
no.s <- 4 #no. of scenarios
vrl <- matrix()
vrl[1,] <- c(v1r,v1,no.s)
vrl[2,] <- c(v2r, v2, no.s)
vrl[3,] <- c(v3r, v3, no.s)
v1 <- 3
v2 <- .5
v3 <- 100
v1r <- c(1,5)
v2r <- c(0,1)
v3r <- c(75,125)
#column -> variables
#row -> scenarios
no.s <- 4 #no. of scenarios
vrl <- matrix(3,3)
vrl[1,] <- c(v1r,v1,no.s)
vrl[2,] <- c(v2r, v2, no.s)
vrl[3,] <- c(v3r, v3, no.s)
v1 <- 3
v2 <- .5
v3 <- 100
v1r <- c(1,5)
v2r <- c(0,1)
v3r <- c(75,125)
#column -> variables
#row -> scenarios
no.s <- 4 #no. of scenarios
vrl <- matrix(NA,3,3)
vrl[1,] <- c(v1r,v1,no.s)
vrl[2,] <- c(v2r, v2, no.s)
vrl[3,] <- c(v3r, v3, no.s)
vrl
v1 <- 3
v2 <- .5
v3 <- 100
v1r <- c(1,5)
v2r <- c(0,1)
v3r <- c(75,125)
#column -> variables
#row -> scenarios
no.s <- 4 #no. of scenarios
vrl <- matrix(NA,3,4)
vrl[1,] <- c(v1r,v1,no.s)
vrl[2,] <- c(v2r, v2, no.s)
vrl[3,] <- c(v3r, v3, no.s)
vrl
result <- matrix(NA,nrow(vrl)*ncol(vrl),ncol(vrl))
6/2
6*.25
6*.75
seq(1,6,length=4)
result <- matrix(NA,nrow(vrl)*no.s,ncol(vrl))
for(i in 1:nrow(vrl)){
for(j in 0:(no.s-1)){
result[i+j,i] <- seq(vlr[i,1],vlr[i,2],length=no.s)[j+1]
}
}
no.s <- 4 #no. of scenarios
vrl <- matrix(NA,3,4)
vrl[1,] <- c(v1r,v1,no.s)
vrl[2,] <- c(v2r, v2, no.s)
vrl[3,] <- c(v3r, v3, no.s)
result <- matrix(NA,nrow(vrl)*no.s,ncol(vrl))
for(i in 1:nrow(vrl)){
for(j in 0:(no.s-1)){
result[i+j,i] <- seq(vlr[i,1],vlr[i,2],length=no.s)[j+1]
}
}
v1 <- 3
v2 <- .5
v3 <- 100
v1r <- c(1,5)
v2r <- c(0,1)
v3r <- c(75,125)
#column -> variables
#row -> scenarios
no.s <- 4 #no. of scenarios
vrl <- matrix(NA,3,4)
vrl[1,] <- c(v1r,v1,no.s)
vrl[2,] <- c(v2r, v2, no.s)
vrl[3,] <- c(v3r, v3, no.s)
result <- matrix(NA,nrow(vrl)*no.s,ncol(vrl))
for(i in 1:nrow(vrl)){
for(j in 0:(no.s-1)){
result[i+j,i] <- seq(vrl[i,1],vrl[i,2],length=no.s)[j+1]
}
}
result
vrl
v1 <- 3
v2 <- .5
v3 <- 100
v1r <- c(1,5)
v2r <- c(0,1)
v3r <- c(75,125)
#column -> variables
#row -> scenarios
no.s <- 4 #no. of scenarios
vrl <- matrix(NA,3,4)
vrl[1,] <- c(v1r,v1,no.s)
vrl[2,] <- c(v2r, v2, no.s)
vrl[3,] <- c(v3r, v3, no.s)
result <- matrix(NA,nrow(vrl)*no.s,nrow(vrl))
for(i in 1:nrow(vrl)){
for(j in 0:(no.s-1)){
result[i+(j*i),i] <- seq(vrl[i,1],vrl[i,2],length=no.s)[j+1]
}
}
result
v1 <- 3
v2 <- .5
v3 <- 100
v1r <- c(1,5)
v2r <- c(0,1)
v3r <- c(75,125)
#column -> variables
#row -> scenarios
no.s <- 4 #no. of scenarios
vrl <- matrix(NA,3,4)
vrl[1,] <- c(v1r,v1,no.s)
vrl[2,] <- c(v2r, v2, no.s)
vrl[3,] <- c(v3r, v3, no.s)
result <- matrix(NA,nrow(vrl)*no.s,nrow(vrl))
for(i in 1:nrow(vrl)){
for(j in 1:(no.s)){
result[j+(no.s*(i-1)),i] <- seq(vrl[i,1],vrl[i,2],length=no.s)[j]
}
}
result
is.na(result[,1])
v1 <- 3
v2 <- .5
v3 <- 100
v1r <- c(1,5)
v2r <- c(0,1)
v3r <- c(75,125)
#column -> variables
#row -> scenarios
no.s <- 4 #no. of scenarios
vrl <- matrix(NA,3,4)
vrl[1,] <- c(v1r,v1,no.s)
vrl[2,] <- c(v2r, v2, no.s)
vrl[3,] <- c(v3r, v3, no.s)
result <- matrix(NA,nrow(vrl)*no.s,nrow(vrl))
for(i in 1:nrow(vrl)){
for(j in 1:(no.s)){
result[j+(no.s*(i-1)),i] <- seq(vrl[i,1],vrl[i,2],length=no.s)[j]
}
result[,is.na(vrl[,i])] <- vrl[i,3]
}
result
result[,is.na(vrl[,i])]
v1 <- 3
v2 <- .5
v3 <- 100
v1r <- c(1,5)
v2r <- c(0,1)
v3r <- c(75,125)
#column -> variables
#row -> scenarios
no.s <- 4 #no. of scenarios
vrl <- matrix(NA,3,4)
vrl[1,] <- c(v1r,v1,no.s)
vrl[2,] <- c(v2r, v2, no.s)
vrl[3,] <- c(v3r, v3, no.s)
result <- matrix(NA,nrow(vrl)*no.s,nrow(vrl))
for(i in 1:nrow(vrl)){
for(j in 1:(no.s)){
result[j+(no.s*(i-1)),i] <- seq(vrl[i,1],vrl[i,2],length=no.s)[j]
}
result[,is.na(result[,i])] <- vrl[i,3]
}
v1 <- 3
v2 <- .5
v3 <- 100
v1r <- c(1,5)
v2r <- c(0,1)
v3r <- c(75,125)
#column -> variables
#row -> scenarios
no.s <- 4 #no. of scenarios
vrl <- matrix(NA,3,4)
vrl[1,] <- c(v1r,v1,no.s)
vrl[2,] <- c(v2r, v2, no.s)
vrl[3,] <- c(v3r, v3, no.s)
result <- matrix(NA,nrow(vrl)*no.s,nrow(vrl))
for(i in 1:nrow(vrl)){
for(j in 1:(no.s)){
result[j+(no.s*(i-1)),i] <- seq(vrl[i,1],vrl[i,2],length=no.s)[j]
}
result[is.na(result[,i]),i] <- vrl[i,3]
}
result
shiny::runApp('D:/Dropbox/IBM project_Sai/Lao Model/v8_booster')
shiny::runApp('D:/Dropbox/IBM project_Sai/Lao Model/v8_booster')
library(swilr)
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
g1
range(g1)
range(g2)
difference <- g2-g1
range(difference)
mean(difference)
s <- sd(difference)
mn+c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)$conf.int
sp <- 7*15.34^2+20*18.23^2
ns <- 27
sp <- sqrt(sp/ns)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt((1/8)+(1/21))
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp <- sqrt((9*var(g1))+(9*var(g2))/18)
sp <- sqrt(9*var(g1)+9*var(g2))/18
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md+c(-1,1)*qt(.975,18)*sp*sqrt(1/10+1/10)
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf
num <- (15.34^2/8+18.23^2/21)
num <- (15.34^2/8+18.23^2/21)^2
den <- (15.34^4/8^2/7)+(18.23^4/21^2/20)
mydf <- num/den
132.86-127.44+c(-1,1)*qt(.975,mpdf)*sqrt(15.34^2/8+18.23^2/21)
132.86-127.44+c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8+18.23^2/21)
1
32-30/1
(32-30)/(10/sqrt(16))
qt(.95,15)
15
qt(.95,15)
dim(fs)
t.test(fs$sheight-fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
7
8
pt(2.5,15, lower.tail = FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2, lower.tail = FALSE)
mybin
pbinom(6, size=8, prob=.5, lower.tail = FALSE)
pbinom(7,size = 8, lower.tail = TRUE)
pbinom(7,size = 8,prob=.5, lower.tail = TRUE)
ppois(9,lambda = 5,lower.tail = FALSE)
library(ggplot2)
lambda = 0.2
n = 40
nosim =1:1000
means <- data.frame(x = sapply(nosim, function(x) {mean(rexp(n, lambda))}))
length(means)
means
var(rexp(40,rate=1/.2))
sd(rexp(40,rate=1/.2))
var(rexp(1000,rate=1/.2))
var(rexp(1000,rate=.2))
data("ToothGrowth")
xtab(ToothGrowth)
xtable(ToothGrowth)
xtab
xtabs(ToothGrowth)
?xtabs
table(ToothGrowth)
table(ToothGrowth$supp,ToothGrowth$dose)
16738+12157
12157.4+1200
setwd("~/OneDrive/MORU/Projects/PSA of Savannakhet model/")
library(deSolve)
library(shiny)
library(TSA)
library(Rcpp)
library(stringr)
sourceCpp("~/OneDrive/MORU/Projects/PSA of Savannakhet model/modGMS.cpp")
source("~/OneDrive/MORU/Projects/PSA of Savannakhet model/modified copy of shiny2ode.R")
#code to construct the 'for' loop for PSA will be generated from sourcing 'modified copy of shiny2ode.R'
#valueTable was also in there
EDATon <- TRUE
ITNon <- TRUE
IRSon <- TRUE
MDAon <- TRUE
VACon <- TRUE
MSATon <- TRUE
primon <- FALSE
no.s <- 2 #no. of simulations/ no. of values between the range
result <- matrix(NA, nrow(valueRange)*no.s, 2) #valueTable and valueRange are from 'modified copy of shiny2ode.R'
simValueTable <- genSimValue(valueRange,no.s)
setwd("D:/OneDrive/MORU/Projects/PSA of Savannakhet model/") #windows
library(deSolve)
library(shiny)
library(TSA)
library(Rcpp)
library(stringr)
sourceCpp("~/OneDrive/MORU/Projects/PSA of Savannakhet model/modGMS.cpp")
source("~/OneDrive/MORU/Projects/PSA of Savannakhet model/modified copy of shiny2ode.R")
#code to construct the 'for' loop for PSA will be generated from sourcing 'modified copy of shiny2ode.R'
#valueTable was also in there
EDATon <- TRUE
ITNon <- TRUE
IRSon <- TRUE
MDAon <- TRUE
VACon <- TRUE
MSATon <- TRUE
primon <- FALSE
no.s <- 2 #no. of simulations/ no. of values between the range
result <- matrix(NA, nrow(valueRange)*no.s, 2) #valueTable and valueRange are from 'modified copy of shiny2ode.R'
simValueTable <- genSimValue(valueRange,no.s)
setwd("D:/OneDrive/MORU/Projects/PSA of Savannakhet model/") #windows
library(deSolve)
library(shiny)
library(TSA)
library(Rcpp)
library(stringr)
#sourceCpp("~/OneDrive/MORU/Projects/PSA of Savannakhet model/modGMS.cpp")
#source("~/OneDrive/MORU/Projects/PSA of Savannakhet model/modified copy of shiny2ode.R")
sourceCpp("modGMS.cpp")
source("modified copy of shiny2ode.R")
#code to construct the 'for' loop for PSA will be generated from sourcing 'modified copy of shiny2ode.R'
#valueTable was also in there
EDATon <- TRUE
ITNon <- TRUE
IRSon <- TRUE
MDAon <- TRUE
VACon <- TRUE
MSATon <- TRUE
primon <- FALSE
no.s <- 2 #no. of simulations/ no. of values between the range
result <- matrix(NA, nrow(valueRange)*no.s, 2) #valueTable and valueRange are from 'modified copy of shiny2ode.R'
simValueTable <- genSimValue(valueRange,no.s)
setwd("D:/OneDrive/MORU/Projects/PSA of Savannakhet model/") #windows
library(deSolve)
library(shiny)
library(TSA)
library(Rcpp)
library(stringr)
#sourceCpp("~/OneDrive/MORU/Projects/PSA of Savannakhet model/modGMS.cpp")
#source("~/OneDrive/MORU/Projects/PSA of Savannakhet model/modified copy of shiny2ode.R")
sourceCpp("/modGMS.cpp")
source("/modified copy of shiny2ode.R")
list.files9
list.files()
sourceCpp("/modGMS.cpp")
sourceCpp("modGMS.cpp")
library(Rcpp)
sourceCpp("modGMS.cpp")
source("/modified copy of shiny2ode.R")
source("modified copy of shiny2ode.R")
source("\modified copy of shiny2ode.R")
source("\\modified copy of shiny2ode.R")
list.files()
?sourceCpp
source("modified copy of shiny2ode.R")
source("./modified copy of shiny2ode.R")
source("/modified copy of shiny2ode.R")
source("\modified copy of shiny2ode.R")
source("\\modified copy of shiny2ode.R")
setwd("D:/OneDrive/MORU/Projects/PSA of Savannakhet model/") #windows
library(deSolve)
library(shiny)
library(TSA)
library(Rcpp)
library(stringr)
#sourceCpp("~/OneDrive/MORU/Projects/PSA of Savannakhet model/modGMS.cpp")
#source("~/OneDrive/MORU/Projects/PSA of Savannakhet model/modified copy of shiny2ode.R")
sourceCpp("modGMS.cpp")
source("modified copy of shiny2ode.R")
EDATon <- TRUE
ITNon <- TRUE
IRSon <- TRUE
MDAon <- TRUE
VACon <- TRUE
MSATon <- TRUE
primon <- FALSE
no.s <- 2 #no. of simulations/ no. of values between the range
result <- matrix(NA, nrow(valueRange)*no.s, 2) #valueTable and valueRange are from 'modified copy of shiny2ode.R'
simValueTable <- genSimValue(valueRange,no.s)
head(simValueTable)
choose(3,3)
choose(3,1)
?permute
?permutate
valueRange
valueTable
3^37
3^37
2^37
library(permute)
?permute
example(permute)
permute(3)
permutations
install.packages('gtools')
library(gtools)
permutations
?permutations
example(permutations)
permutations(3,2,c('l','m','h'),repeat=T)
permutations(3,2,c('l','m','h'),repeat=TRUE)
permutations(3,2,c('l','m','h'),repeats.allowed = TRUE)
permutations(3,2,1:3,repeats.allowed = TRUE)
permutations(3,2,c('l','m','h'),repeats.allowed = TRUE)
3^37
valueTable
write.csv(valueTable[,1], file = "/truePSA/37var.csv")
?write.csv
write.csv(valueTable[,1], file = "/truePSA/var37.csv")
write.csv(valueTable[,1], file = "truePSA/var37.csv")
runApp('D:/Dropbox/IBM project_Sai/Lao Model/v8_booster')
var37[15:37]
21-8
runApp('D:/Dropbox/IBM project_Sai/RAI model/v13_newUI')
install.packages("shinyBS")
runApp('D:/Dropbox/IBM project_Sai/RAI model/v13_newUI')
install.packages("shinyWidgets")
runApp('D:/Dropbox/IBM project_Sai/RAI model/v13_newUI')
runApp('D:/Dropbox/IBM project_Sai/RAI model/v13_newUI')
runApp('D:/Dropbox/IBM project_Sai/RAI model/v13_newUI')
runApp('D:/Dropbox/IBM project_Sai/RAI model/v13_newUI')
install.packages('readxl')
install.packages("readxl")
shiny::runApp('D:/Dropbox/IBM project_Sai/RAI model/v13_newUI')
install.packages("shinythemes")
install.packages("shinythemes")
shiny::runApp('D:/Dropbox/IBM project_Sai/RAI model/v13_newUI')
runApp('D:/Dropbox/App')
runApp('D:/Dropbox/IBM project_Sai/RAI model/v13_newUI')
runApp('D:/Dropbox/App')
runApp('D:/Dropbox/App')
runApp('D:/Dropbox/App')
